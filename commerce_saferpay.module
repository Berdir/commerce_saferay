<?php

/**
 * @file
 * Process payments using Saferpay.
 *
 * For API reference see http://www.saferpay.com/help
 */

/**
 * Implementation of hook_menu().
 */
function commerce_saferpay_menu() {
  // Callback functions for cip payment.
  $items['commerce_saferpay/ipn/%commerce_payment_method_instance/%commerce_order'] = array(
    'title' => 'Saferpay payment notification',
    'page callback' => 'commerce_saferpay_ipn',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_saferpay.pages.inc',
  );

  // Callback functions for cip payment.
  $items['commerce_saferpay/return/%commerce_payment_method_instance/%commerce_order'] = array(
    'title' => 'Saferpay payment notification',
    'page callback' => 'commerce_saferpay_ipn',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_saferpay.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_payment_method().
 */
function commerce_saferpay_commerce_payment_method_info() {

  $payment_methods = array();

  $payment_methods['saferpay'] = array(
    'base' => 'commerce_saferpay',
    'title' => t('Saferpay'),
    'description' => t('Redirect users to submit payments through Saferpay.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => 5,
  );

  return $payment_methods;
}

/**
 * Implements CALLBACK_commerce_payment_method_settings_form().
 */
function commerce_saferpay_settings_form($settings = NULL) {

  $settings += array(
    'account_id' => '99867-94913159',
    'password' => 'XAjc3Kna',
    'order_identifier' => '[commerce-order:order-id]-[commerce-order:created]',
    'autocomplete' => TRUE,
    'cvc' => TRUE,
    'ccname' => TRUE,
    'order_description' => 'Order [commerce-order:order-id] at [site:name]',
  );

  $form['account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#default_value' => $settings['account_id'],
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('spPassword'),
    '#description' => t('Only required for the test account.'),
    '#default_value' => $settings['password'],
  );
  $form['order_identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Order identifier'),
    '#description' => t('The order identifier sent to Saferpay Gateway - check Replacement patterns'),
    '#default_value' => $settings['order_identifier'],
  );
  $form['order_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order description'),
    '#description' => t('The order description displayed on the payment page -  check Replacement patterns'),
    '#default_value' => $settings['order_description'],
  );
  $form['view']['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['view']['token_help']['help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('commerce-order'),
  );
  $form['autocomplete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Finalize payment by capture of transaction.'),
    '#default_value' => $settings['autocomplete'],
  );
  $form['cvc'] = array(
    '#type' => 'checkbox',
    '#title' => t('CVC2/CVV2 field active?'),
    '#default_value' => $settings['cvc'],
  );
  $form['ccname'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cardholder field active?'),
    '#default_value' => $settings['ccname'],
  );
  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form.
 */
function commerce_saferpay_redirect_form($form, &$form_state, $order, $payment_method) {
  if (empty($payment_method['settings']['account_id'])) {
    drupal_set_message(t('Saferpay is not configured for use. No Account ID has been specified.'), 'error');
    return array();
  }

  $url =_commerce_saferpay_initpay($order, $payment_method['settings'], $payment_method['instance_id']);
  if (empty($url)) {
    drupal_set_message(t('Failed to contact Saferpay.'), 'error');
    return array();
  }
  $form['#action'] = $url;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Saferpay'),
    '#weight' => 50,
  );

  return $form;
}

function commerce_saferpay_redirect_form_validate($order, $payment_method) {
  if (empty($_GET['DATA'])) {
    return FALSE;
  }

  $data = $_GET['DATA'];
  $signature = $_GET['SIGNATURE'];

  return _commerce_saferpay_validate($data, $signature);
}

function _commerce_saferpay_validate($data, $signature) {
  $verify = array(
    'DATA' => $data,
    'SIGNATURE' => $signature,
  );
  $url = url('https://www.saferpay.com/hosting/VerifyPayConfirm.asp', array('external' => TRUE, 'query' => $verify));
  $result = _commerce_saferpay_process_url($url);

  if (drupal_substr($result, 0, 3) != 'OK:') {
    return FALSE;
  }
  _commerce_saferpay_result($result);
  return TRUE;
}

function _commerce_saferpay_result($result = NULL) {
  $static = &drupal_static(__FUNCTION__);
  if ($result) {
    $static = $result;
  }
  return $static;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form_submit().
 */
function commerce_saferpay_redirect_form_submit($order, $payment_method) {
  if (empty($_GET['DATA'])) {
    return;
  }
  $data = $_GET['DATA'];
  while (drupal_strtolower(drupal_substr($data, 0, 14)) == '<idp msgtype=\\') {
    $data = stripslashes($data);
  }

  $result = _commerce_saferpay_result();

  commerce_saferpay_process_data($order, $payment_method, $data, $result);
}

/**
 * Process the data sent by saferpay.
 *
 * @param type $order
 * @param type $payment_method
 * @param type $data
 * @param type $result
 * @return type
 */
function commerce_saferpay_process_data($order, $payment_method, $data, $result) {
  $data_xml = simplexml_load_string($data);
  if (!is_object($data_xml)) {
    return;
  }
  $tx_amount = $data_xml['AMOUNT'];
  $tx_currency = $data_xml['CURRENCY'];

  parse_str(drupal_substr($result, 3), $result_output);

  // Look for an existing transaction.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $result_output['ID'])
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    $transaction = commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('saferpay', $order->order_id);
  }

  $transaction->remote_id = $result_output['ID'];
  $transaction->amount = $tx_amount;
  $transaction->currency_code = $tx_currency;
  $transaction->payload[REQUEST_TIME] = $data;

  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = t('Transaction has been reserved.');

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  if (variable_get('commerce_saferpay_autocomplete', TRUE)) {
    $finalize = array(
      'ACCOUNTID' => $payment_method['settings']['account_id'],
      'ID' => $result_output['ID'],
      'TOKEN' => $result_output['TOKEN'],
    );
    if (!empty($payment_method['settings']['password'])) {
      $finalize['spPassword'] = $payment_method['settings']['password'];
    }
    $url = url('https://www.saferpay.com/hosting/PayComplete.asp', array('external' => TRUE, 'query' => $finalize));
    $result = _commerce_saferpay_process_url($url);
    if (drupal_substr($result, 0, 2) == 'OK') {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Successfully completed the payment.');
      $transaction->remote_message = $result;
      commerce_payment_transaction_save($transaction);
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Failed to complete payment.');
      $transaction->remote_message = $result;
      commerce_payment_transaction_save($transaction);
    }
  }
}

/**
 * Interacts with the saferpay webservice to get the url to make the transaction.
 *
 * @param $order
 *   The order
 *
 * @return
 *   URL to redirect the user to make payment.
 */
function _commerce_saferpay_initpay($order, $settings, $instance_id) {
  global $language;

  $order_identifier = token_replace($settings['order_identifier'], array('commerce-order' => $order));
  $order_description = token_replace($settings['order_description'], array('commerce-order' => $order));

  $total = field_get_items('commerce_order', $order, 'commerce_order_total');

  $data = array();

  $data['ACCOUNTID'] = $settings['account_id'];

  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }

  $data['LANGID'] = $language->language;
  $data['AMOUNT'] = $total[0]['amount'];
  $data['CURRENCY'] = $total[0]['currency_code'];
  $data['DESCRIPTION'] = htmlentities($order_description);
  $data['ORDERID']  = htmlentities($order_identifier);
  $data['ALLOWCOLLECT'] = 'no';
  $data['DELIVERY'] = 'no';
  $data['CCCVC'] = $settings['cvc'] ? 'yes' : 'no';
  $data['CCNAME'] = $settings['ccname'] ? 'yes' : 'no';
  $data['FAILLINK'] = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $data['NOTIFYURL'] = url('commerce_saferpay/ipn/' . $instance_id . '/' . $order->order_id, array('absolute' => TRUE));
  $data['SUCCESSLINK'] = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $data['BACKLINK'] = url('cart', array('absolute' => TRUE));

  $url = url('https://www.saferpay.com/hosting/CreatePayInit.asp', array('external' => TRUE, 'query' => $data));
  
  $return = _commerce_saferpay_process_url($url);
  if (strpos($return, 'ERROR') !== FALSE) {
     drupal_set_message($return, 'error');
     drupal_set_message(t('An error occurred during payment.'), 'error');
     // Prevent endless redirection loop.
     drupal_goto(); 
  }
  return $return;
}
/**
 * Proxy for saferpay's requests.
 *
 * @param $url
 *   The webservice prepared url, i.e. initpay, verifypayconfirm, paycomplete
 *
 * @return
 *   Webservice response.
 */
function _commerce_saferpay_process_url($sUrl) {
  $ch = curl_init($sUrl);
  curl_setopt($ch, CURLOPT_PORT, 443);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $sReturn = curl_exec($ch);
  curl_close($ch);
  return $sReturn;
}
