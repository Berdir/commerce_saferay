<?php

/**
 * @file
 * Process payments using Saferpay Payment Page.
 *
 * For API reference see http://www.saferpay.com/help
 */
define('COMMERCE_SAFERPAY_ECI_NO_LIABILITYSHIFT', 0);
define('COMMERCE_SAFERPAY_ECI_3D_AUTHENTICATION', 1);
define('COMMERCE_SAFERPAY_ECI_3D_NO_AUTHENTICATION', 2);

/**
 * Implements hook_menu().
 */
function commerce_saferpay_professional_menu() {
  $items['commerce/saferpay/scd/%commerce_order/%'] = array(
    'title' => 'Saferpay SCD Response',
    'page callback' => 'commerce_saferpay_professional_scd_handle_response',
    'page arguments' => array(3),
    'access callback' => 'commerce_saferpay_professional_redirect_access',
    'access arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_saferpay_professional.pages.inc',
  );
  $items['commerce/saferpay/mpi/%commerce_order/%'] = array(
    'title' => 'Saferpay MPI Response',
    'page callback' => 'commerce_saferpay_professional_mpi_handle_response',
    'page arguments' => array(3),
    'access callback' => 'commerce_saferpay_professional_redirect_access',
    'access arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_saferpay_professional.pages.inc',
  );
  return $items;
}

/**
 * Acess callback for payment redirect.
 */
function commerce_saferpay_professional_redirect_access($order, $key) {
  if (user_access('access checkout') && !empty($_GET['DATA']) && $key == $order->data['payment_redirect_key']) {
    return commerce_saferpay_confirm_validate($_GET['DATA'], $_GET['SIGNATURE']);
  }
}

/**
 * Implementation of hook_commerce_payment_method_info().
 */
function commerce_saferpay_professional_commerce_payment_method_info() {

  $payment_methods = array();

  $payment_methods['commerce_saferpay_professional'] = array(
    'method_id' => 'commerce_saferpay_professional',
    'title' => t('Saferpay Professional'),
    'description' => t('Handels payments (almost) without redirects to Saferpay. (Hidden Mode)'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 */
function commerce_saferpay_professional_settings_form($settings = NULL) {
  $form = commerce_saferpay_settings_form($settings);

  $settings += array(
    'require_liablityshift' => FALSE,
  );

  $form['require_liablityshift'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require confirmed liability shift for the payments'),
    '#description' => t('If checked, only payments from credit cards with support for 3-D Secure are accepted.'),
    '#default_value' => $settings['require_liablityshift'],
  );
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 *
 * Returns form elements that should be submitted to the redirected payment
 * service; because of the array merge that happens upon return, the service’s
 * URL that should receive the POST variables should be set in the #action
 * property of the returned form array.
 */
function commerce_saferpay_professional_redirect_form($form, &$form_state, $order, $payment_method) {
  if (empty($payment_method['settings']['account_id'])) {
    drupal_set_message(t('Saferpay Professional is not configured for use. No Account ID has been specified.'), 'error');
    return array();
  }

  $url = _commerce_saferpay_professional_initpay($order, $payment_method['settings'], $payment_method['instance_id']);
  if (empty($url)) {
    drupal_set_message(t('Failed to contact Saferpay.'), 'error');
    return array();
  }

  $form['#method'] = 'post';
  $form['#action'] = $url;

  $form['sfpCardNumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number'),
    '#size' => 16,
    '#maxlength' => 16,
    '#required' => TRUE,
  );

  $form['sfpCardExpiryMonth'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration Month'),
    '#size' => 2,
    '#maxlength' => 2,
    '#required' => TRUE,
  );

  $form['sfpCardExpiryYear'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration Year'),
    '#size' => 2,
    '#maxlength' => 2,
    '#required' => TRUE,
  );

  $form['CardHolder'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Holder Name'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => TRUE,
  );

  $form['CVC'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC'),
    '#size' => 4,
    '#maxlength' => 4,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 50,
  );

  return $form;
}

function _commerce_saferpay_professional_initpay($order, $settings, $instance_id) {
  $data = array();

  // @todo: Check this:
  // * Für die Verwendung von CARDREFID="new" muss bei Saferpay zunächst ein numerischer Startwert für den
  // Account hinterlegt werden. Kontaktieren Sie hierfür integration@saferpay.com.
  $data['CARDREFID'] = 'new';

  $data['FAILLINK'] = url('commerce/saferpay/scd/' . $order->order_id . '/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $data['SUCCESSLINK'] = $data['FAILLINK'];
  $data['BACKLINK'] = $data['FAILLINK'];

  return commerce_saferpay_initpay($order, $settings, $instance_id, $data);
}

/**
 * Stores an error message for later retrieval.
 *
 * @param $new_error
 *   (Optional) Overwrites the currently stored error message.
 *
 * @return
 *   Returns the currently stored error message.
 */
function commerce_saferpay_professional_error($new_error = NULL) {
  $error = &drupal_static(__FUNCTION__);
  if ($new_error) {
    $error = $new_error;
  }
  return $error;
}

/**
 * Verifies 3-D secure enrollment.
 *
 * @param $order
 *   The order object.
 * @param $scd_response
 *   The scd_response SimpleXML object containing the CARDREFID, EXPIRYMONTH
 *   and EXPIRYYEAR attributes.
 * @param $settings
 *   The payment method settings.
 *
 * @return SimpleXMLElement
 *   The response object if the verify enrollment call successed, FALSE
 *   otherwise. The error can be fetched from
 *   commerce_saferpay_professional_error() in that case.
 */
function commerce_saferpay_professional_verify_enrollment($order, $scd_response, $settings) {
  $data = array();

  // Generic arguments.
  $data['MSGTYPE'] = 'VerifyEnrollment';
  $data['ACCOUNTID'] = $settings['account_id'];
  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }
  $data['MPI_PA_BACKLINK'] = url('commerce/saferpay/mpi/' . $order->order_id . '/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // Card reference.
  $data['CARDREFID'] = $scd_response['CARDREFID'];
  $data['EXP'] = $scd_response['EXPIRYMONTH'] . $scd_response['EXPIRYYEAR'];

  // Order amount.
  $total = field_get_items('commerce_order', $order, 'commerce_order_total');
  $data['AMOUNT'] = $total[0]['amount'];
  $data['CURRENCY'] = $total[0]['currency_code'];

  $url = url('https://www.saferpay.com/hosting/VerifyEnrollment.asp', array('external' => TRUE, 'query' => $data));

  $return = commerce_saferpay_process_url($url);
  list($code, $data) = explode(':', $return, 2);
  if ($code == 'OK') {
    return simplexml_load_string($data);
  }
  else {
    commerce_saferpay_professional_error($data);
  }
  return FALSE;
}

/**
 * Authorizes a payment.
 *
 * @param $order
 *   The order object.
 * @param $card_ref_id
 *   The cardrefid issued by Saferpay Secure Card Data.
 * @param $mpi_session_id
 *   The session id given by Saferpay MPI.
 * @param $settings
 *   The payment method settings.
 * @param $method_id
 *   The payment method id.
 *
 * @return
 *   The transaction object if the authorization succeeded, FALSE
 *   otherwise. The error can be fetched from
 *   commerce_saferpay_professional_error() in that case.
 */
function commerce_saferpay_professional_authorize_payment($order, $card_ref_id, $mpi_session_id, $settings, $method_id) {
  $data = array();

  // Generic arguments.
  $data['MSGTYPE'] = 'VerifyEnrollment';
  $data['ACCOUNTID'] = $settings['account_id'];
  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }

  $data['CARDREFID'] = $card_ref_id;
  $data['MPI_SESSIONID'] = $mpi_session_id;

  // Order data.
  $total = field_get_items('commerce_order', $order, 'commerce_order_total');
  $data['AMOUNT'] = $total[0]['amount'];
  $data['CURRENCY'] = $total[0]['currency_code'];
  $data['ORDERID'] = $order->order_id;

  $url = url('https://www.saferpay.com/hosting/execute.asp', array('external' => TRUE, 'query' => $data));

  $return = commerce_saferpay_process_url($url);
  list($code, $idp_string) = explode(':', $return, 2);
  if ($code == 'OK') {
    $idp = simplexml_load_string($idp_string);

    if ((int) $idp['RESULT'] == 0) {
      $transaction = commerce_saferpay_get_transaction($order, $idp['ID'], $method_id);
      $transaction->remote_id = $idp['ID'];
      $transaction->amount = $data['AMOUNT'];
      $transaction->currency_code = $data['CURRENCY'];
      $transaction->payload[REQUEST_TIME][] = $idp_string;

      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = t('Transaction has been reserved.');

      // Save the transaction information.
      commerce_payment_transaction_save($transaction);
      return $transaction;
    }
    else {
      commerce_saferpay_professional_error($idp['AUTHMESSAGE']);
      return FALSE;
    }
  }
  else {
    commerce_saferpay_professional_error($data);
  }
  return FALSE;
}

/**
 * Verifies 3-D secure enrollment.
 *
 * @param $transaction
 *   Commerce payment transaction object to be settled.
 * @param settings
 *   The payment method settings.
 *
 * @return SimpleXMLElement
 *   TRUE if the settlement succeeded, FALSE otherwise. The error can be fetched
 *   from commerce_saferpay_professional_error() in that case.
 */
function commerce_saferpay_professional_settle_payment($transaction, $settings) {
  $data = array();

  // Generic arguments.
  $data['ACCOUNTID'] = $settings['account_id'];
  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }
  $data['ACTION'] = 'Settlement';

  $data['ID'] = $transaction->remote_id;

  $url = url('https://www.saferpay.com/hosting/paycompletev2.asp', array('external' => TRUE, 'query' => $data));

  $return = commerce_saferpay_process_url($url);
  list($code, $data) = explode(':', $return, 2);
  if ($code == 'OK') {
    $response = simplexml_load_string($data);
    if ((int) $response['RESULT'] == 0) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Successfully completed the payment.');
      $transaction->remote_message = (string) $response['MESSAGE'];
      $transaction->payload[REQUEST_TIME][] = $data;
      commerce_payment_transaction_save($transaction);
      return TRUE;
    }
    else {
      commerce_saferpay_professional_error($response['MESSAGE'] . $response['AUTHMESSAGE']);
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Failed to complete payment.');
      $transaction->remote_message = (string) $response['MESSAGE'];
      $transaction->payload[REQUEST_TIME][] = $data;
      commerce_payment_transaction_save($transaction);
    }
  }
  else {
    commerce_saferpay_professional_error($data);
  }
  return FALSE;
}

/**
 * Authorize and optionally settle the payment for an order object.
 *
 * This is a user interface function which will use drupal_goto() to redirect
 * the user, do not use this if there is no user interface involved.x
 *
 * @param $order
 *   The order object.
 * @param $card_ref_id
 *   The cardrefid issued by Saferpay Secure Card Data.
 * @param $mpi_session_id
 *   The session id given by Saferpay MPI.
 */
function commerce_saferpay_professional_pay_order($order, $card_ref_id, $mpi_session_id) {
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  $transaction = commerce_saferpay_professional_authorize_payment($order, $card_ref_id, $mpi_session_id, $payment_method['settings'], $payment_method['method_id']);
  if ($transaction !== FALSE) {
    $complete_response = commerce_saferpay_professional_settle_payment($transaction, $payment_method['settings']);
    if ($complete_response === TRUE) {
      // Send the customer on to the next checkout page.
      commerce_payment_redirect_pane_next_page($order);
      drupal_goto(commerce_checkout_order_uri($order));
    }
    else {
      // Display error and redirect back.
      drupal_set_message(t('An error occured while settling the payment: @error.', array('@error' => commerce_saferpay_professional_error())), 'error');
      drupal_goto(commerce_checkout_order_uri($order));
    }
  }
  else {
    drupal_set_message(t('An error occured while processing the payment: @error.', array('@error' => commerce_saferpay_professional_error())), 'error');
    drupal_goto(commerce_checkout_order_uri($order));
  }
}
